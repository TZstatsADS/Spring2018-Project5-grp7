knitr::opts_chunk$set(echo = TRUE)
RF("SIFT_train.csv")
if(!require("randomForest")){
install.packages("randomForest")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("e1071")){
install.packages("e1071")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
library(randomForest)
library(caret)
library(e1071)
library(knitr)
library(ggplot2)
customRF <- list(type = "Classification", library = "randomForest", loop = NULL)
customRF$parameters <- data.frame(parameter = c("mtry", "ntree"), class = rep("numeric", 2), label = c("mtry", "ntree"))
customRF$grid <- function(x, y, len = NULL, search = "grid") {}
customRF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...){
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
customRF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL){
predict(modelFit, newdata)
}
customRF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL){
predict(modelFit, newdata, type = "prob")
}
customRF$sort <- function(x) x[order(x[,1]),]
customRF$levels <- function(x) x$classes
RF<-function(feature_file,way="readcsv",header_TF=FALSE){
setwd("/Users/JHY/Documents/2018SpringCourse/Applied Data Science/Spring2018-Project3-Group1/output")
test_index<-read.table("TEST-NUMBER.txt")
test_index<-as.vector(t(test_index))
if(way=="readcsv"){
feature<-read.csv(feature_file,header = header_TF)
}
if(way=="load"){
load(feature_file)
feature<-dat
colnames(feature)<-as.character(c(1:ncol(feature)))
}
if(feature_file=="SIFT_train.csv"){
feature<-feature[,2:ncol(feature)]
}
label<-read.csv("label_train.csv")
train_data<-feature[-test_index,]
train_label<-label[-test_index,]$label
control <- trainControl(method="cv", number=5)
tunegrid <- expand.grid(mtry=c(round(sqrt(ncol(train_data))-3):round(sqrt(ncol(train_data))+3)), ntree=c(500,1000,1500,2000))
set.seed(24)
custom<-caret::train(train_data,as.factor(train_label),method=customRF,metric="Accuracy",tuneGrid=tunegrid,trControl=control)
summary(custom)
plot(custom)
}
RF("SIFT_train.csv")
specify(ar = 3, ma = 0, sigma2 = 1)
library(itsm)
library(itsmr)
specify(ar = 3, ma = 0, sigma2 = 1)
ts<-specify(ar = 3, ma = 0, sigma2 = 1)
plots(ts)
ts
plots(ts)
a = specify(ar=c(0,0,.99))
plots(a)
ts<-specify(ar = c(0,0,0.99), ma = 0, sigma2 = 1)
plots(ts)
sim(ts,60)
ts_simu<-sim(ts,60)
ts_sim<-sim(ts,60)
rm(ts_simu)
plot(ts_sim)
plots(ts_sim)
plota(ts_sim)
plots(ts_sim)
plots(ts)
plots(ts_sim)
smooth.ma(ts_sim, 1)
plots(ts_filtered)
ts_filtered<-smooth.ma(ts_sim, 1)
plots(ts_filtered)
?plots
plots(ts_filtered)
plots(ts)
ts_sim<-sim(ts,60)
plots(ts_sim)
ts_filtered<-smooth.ma(ts_sim, 1)
plots(ts_filtered)
plots(ts_sim,type="l")
plot(ts_sim,type="l")
plot(ts_filtered,type="l")
plot(ts_sim,type="l")
plot(ts_filtered,type="l")
load("Documents/2018SpringCourse/Applied Data Science/Spring2018-Project4-grp10/output/weight_pearson_2.RData")
get_neighbors_index<-function(sim_weight,threshold=0.5){
neighbors_by_threshold<-vector("list",nrow(sim_weight))
names(neighbors_by_threshold)<-rownames(sim_weight)
user_id_cover<-c()
for(i in 1:nrow(sim_weight)){
neighbors_by_threshold[[i]]<-colnames(sim_weight)[(abs(sim_weight[i,])>threshold) & (sim_weight[i,]!=1)]#whose absolute cor weight larger than threshold(exclude user itself)
if(sum(neighbors_by_threshold[[i]] %in% user_id_cover)<length(neighbors_by_threshold[[i]])){#some of this user's neighbors are not in coverage
user_id_cover <- c(user_id_cover,neighbors_by_threshold[[i]][which(!(neighbors_by_threshold[[i]] %in% user_id_cover))])
}
}
coverage_pre<-length(user_id_cover)/nrow(sim_weight)
return(list(top.neighbors=neighbors_by_threshold,coverage_pre=coverage_pre))
}
hhh<-get_neighbors_index(pearson_weighting2)
hhh$coverage_pre
dim(pearson_weighting2)
is.na(pearson_weighting2)
sum(is.na(pearson_weighting2))
getwd()
setwd("./Documents/2018SpringCourse/Applied Data Science/Spring2018-Project5-grp_7/app")
load("./data/logistic_model_shiny_update.RData")
shiny::runApp()
install.packages("Matrix")
runApp()
userdiy<-ifelse(ingre2000%in%c("salt","water"),1,0)
load("./data/ingre2000.RData")
userdiy<-ifelse(ingre2000%in%c("salt","water"),1,0)
userdiy<-c(1,userdiy)
userdiy_sparse <- Matrix(userdiy,sparse = TRUE)
userdiy_sparse
userdiy<-ifelse(ingre2000%in%c("salt","water"),1,0)
userdiy<-c(1,userdiy)
userdiy_sparse <- t(Matrix(userdiy,sparse = TRUE))
userdiy_sparse
runApp()
runApp()
pred <- predict(fit, userdiy_sparse, type="class", s=fit$lambda.min)
class(userdiy_sparse)
class(fit)
load("./data/logistic_model_shiny.RData")
class(fit)
load("./data/logistic_model_shiny_update.RData")
runApp()
length(userid)
length(userdiy_sparse)
pred <- predict(fit, userdiy_sparse, type="class", s=fit$lambda.min)
?predict
dim(userdiy_sparse)
runApp()
runApp()
class(fit)
length(userdiy)
userdiy
class(userdiy)
userdiy_sparse
runApp()
fit$lambda.min
userdiy
userdiy_sparse <- t(as(userdiy, "sparseMatrix"))
lmd<-fit$lambda.min
pred <- predict(fit, newx=userdiy_sparse, type="class", s=lmd)
runApp()
